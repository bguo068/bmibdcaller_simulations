params {
    resdir = 'res'
    trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
}
env {
    TMPDIR = "/tmp"
}

profiles {
    standard {
        executor {
            name = 'local'
            queueSize = 20
            cpus = 64
            pollInterval = '30 sec'
        }
        process {
            // conda = "$CONDA_PREFIX"
            // conda = "/local/projects-t3/toconnor_grp/bing.guo/miniconda3/envs/simulation"

            errorStrategy = { task.attempt < 5 ? 'retry' : 'finish' }
            maxRetries = 5
            cpus = 1
            memory = '15 GB'

            withName: 'SIM_SP_CHR|SIM_MP_CHR' {
                memory = '15 GB'
                cpus = 2
            }
            withName: 'RUN_IBDNE|CALL_IBD_HAPIBD' {
                cpus = 5
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
        }
    }
    clean {
        executor {
            name = 'hq'
            pollInterval = '30 sec'
            queueSize = 20
        }
        process {
            errorStrategy = { task.attempt < 5 ? 'retry' : 'finish' }
            maxRetries = 5
            cpus = 1
            memory = '30 GB'
        }
    }
    sge {
        executor {
            name = 'sge'
            queueSize = 400
            pollInterval = '30 sec'
        }

        process {
            // Note vscode tend to put tmp files in root of conda env and cause
            // Nextflow to generate new hashes. Two workaround:
            // 1. If `conda` directive is used, ensure the all `.tmp*` files is delete from the conda environment
            // 2. If `conda` directive is not use, just make sure nextflow is available
            // in current environment

            // comment out as vscode tends to add tmp file in conda env root dir, which 
            // change hashes for conda env
            // conda = "/local/projects-t3/toconnor_grp/bing.guo/miniconda3/envs/simulation"

            errorStrategy = {
                sleep(Math.pow(2, task.attempt) * 20 as long)
                return task.attempt < 5 ? 'retry' : 'finish'
            }
            maxRetries = 5
            cpus = 3
            memory = '20 GB'
            cache = 'lenient'

            queue = "threaded.q"
            penv = "thread"
            clusterOptions = "-P toconnor-lab -cwd -V"

            withName: 'SIM_SP_CHR|SIM_MP_CHR|SIM_UK_CHR' {
                memory = '30 GB'
                cpus = 3
            }
            withName: 'CALL_IBD.*' {
                cpus = 3
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
            withName: 'RUN_IBDNE|CALL_IBD_HAPIBD' {
                cpus = 5
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
        }
    }
    // make sure to use a hq version compatible with a corresponding Nextflow version
    // such as nextflow 24.10.2 with hq 0.17.0
    hq {
        executor {
            name = 'hq'
            queueSize = 400
            pollInterval = '30 sec'
        }

        process {

            errorStrategy = {
                sleep(Math.pow(2, task.attempt) * 20 as long)
                return task.attempt < 5 ? 'retry' : 'finish'
            }
            maxRetries = 5
            // cpus = 3
            cpus = 1
            // memory = '20 GB'
            memory = '5 GB'
            cache = 'lenient'

            withName: 'SIM_SP_CHR|SIM_MP_CHR' {
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
                cpus = 1
            }
            withName: SIM_UK_CHR {
                memory = {
                    def mem = 10 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
                cpus = 1
            }
            withName: 'CALL_IBD.*' {
                cpus = 1
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
            withName: 'CALL_IBD_ISORELATE.*' {
                cpus = 3
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
            withName: 'CALL_IBD_REFINEDIBD.*' {
                cpus = 3
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
            withName: 'CALL_IBD_HAPIBD.*' {
                cpus = 3
                memory = {
                    def mem = 5 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
            withName: RUN_IBDNE {
                cpus = 3
                memory = {
                    def mem = 11 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
            withName: CMP_IBD {
                cpus = 5
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
        }
    }
    // make sure to use a hq version compatible with a corresponding Nextflow version
    // such as nextflow 24.10.2 with hq 0.17.0
    hq_recomb {
        executor {
            name = 'hq'
            queueSize = 400
            pollInterval = '30 sec'
        }

        process {

            errorStrategy = {
                sleep(Math.pow(2, task.attempt) * 20 as long)
                return task.attempt < 5 ? 'retry' : 'finish'
            }
            maxRetries = 5
            cpus = 3
            memory = '20 GB'
            cache = 'lenient'

            withName: 'SIM_SP_CHR|SIM_MP_CHR|SIM_UK_CHR' {
                memory = '30 GB'
                cpus = 3
            }
            withName: 'CALL_IBD.*' {
                cpus = 3
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
            withName: 'CALL_IBD_HMMIBD_PARAM|CALL_IBD_ISORELATE_PARAM' {
                cpus = 15
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
            withName: 'RUN_IBDNE|CALL_IBD_HAPIBD' {
                cpus = 5
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '100 GB' : "${mem} GB"
                }
            }
            withName: CMP_IBD {
                cpus = 5
                memory = {
                    def mem = 20 * 2 ** task.attempt
                    mem > 100 ? '90 GB' : "${mem} GB"
                }
            }
        }
    }
}

manifest {
    name = 'bmibdcaller_simulations'
    author = 'Bing Guo'
    homePage = 'https://github.com/gbinux/bmibdcaller_simulations'
    description = 'Nextflow pipeline for IBD caller benchmarking via simulation'
    mainScript = 'main.nf'
    nextflowVersion = '>=24.10.2'
    version = '0.2'
}

trace {
    enabled = true
    overwrite = false
    file = "${params.resdir}/pipeline_trace_${params.trace_timestamp}.txt"
    fields = 'task_id,hash,name,status,exit,realtime,%cpu,rss,workdir'
}
